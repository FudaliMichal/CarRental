@page "/login"
@using CarRental.Models
@using MySqlConnector
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <ValidationSummary />

    <label for="username">Nazwa użytkownika:</label>
    <p>
        <InputText id="username" @bind-Value="loginModel.Login" />
        <ValidationMessage For="@(() => loginModel.Login)" />
    </p>

    <label for="password">Hasło:</label>
    <p>
        <InputText id="password" type="password" @bind-Value="loginModel.Haslo" />
        <ValidationMessage For="@(() => loginModel.Haslo)" />
    </p>

    <button type="submit">Zaloguj się</button>
</EditForm>

@code {
    private KontoUzytkownikaModel loginModel = new KontoUzytkownikaModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(loginModel.Login) || string.IsNullOrEmpty(loginModel.Haslo))
        {
            errorMessage = "Username and Password are required.";
            return;
        }

        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"SELECT IdKontoUzytkownika, Login, CzyPracownik FROM KontoUzytkownika WHERE Login = '{loginModel.Login}' AND Haslo = '{loginModel.Haslo}'";
                using (var command = new MySqlCommand(query, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            var userSession = new KontoUzytkownikaModel
                                {
                                    IdKontoUzytkownika = reader.GetInt32("IdKontoUzytkownika"),
                                    Login = reader.GetString("Login"),
                                    CzyPracownik = reader.GetBoolean("CzyPracownik")
                                };

                            await AuthenticationStateProvider.LoginAsync(userSession);
                            NavigationManager.NavigateTo("/homepage", true);
                        }
                        else
                        {
                            errorMessage = "Invalid username or password.";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
