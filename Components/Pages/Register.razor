@page "/Register"
@using CarRental.Models
@using MySqlConnector
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h1>Zarejestruj się</h1>



<EditForm Model="newUser" OnValidSubmit="RegisterUser" FormName="registrationForm">
    <ValidationSummary />

    <label for="login">Nazwa użytkownika:</label>
    <p>
        <InputText type="text" @bind-Value="_Login"></InputText>
        <ValidationMessage For="@(() => newUser.Login)" />
    </p>
    
    <label for="password">Hasło:</label>
    <p>
        <InputText type="password" @bind-Value="_Haslo"></InputText>
        <ValidationMessage For="@(() => newUser.Haslo)" />
    </p>

    <label for="password">Powtórz hasło:</label>
    <p>
        <InputText type="password" @bind-Value="_Haslo1"></InputText>
        <ValidationMessage For="@(() => newUser.Haslo)" />
    </p>

    <label>Kod pracowniczy:</label>
    <p>
        <InputText type="text" @bind-Value="_kodprac"></InputText>
    </p>

    <p>---------------------------------------------------------</p>
    
    <label>Imię:</label>
    <p>
        <InputText type="text" @bind-Value="_Imie"></InputText>
    </p>
    
    <label>Nazwisko:</label>
    <p>
        <InputText type="text" @bind-Value="_Nazwisko"></InputText>
    </p>
    
    <label>Adres mailowy:</label>
    <p>
        <InputText type="text" @bind-Value="_Mail"></InputText>
    </p>
    
    <p>---------------------------------------------------------</p>
    
    <label>Kraj:</label>
    <p>
        <InputText type="text" @bind-Value="_Kraj"></InputText>
    </p>
  
    <label>Miasto:</label>
    <p>
        <InputText type="text" @bind-Value="_Miasto"></InputText>
    </p>
  
    <label>Ulica:</label>
    <p>
        <InputText type="text" @bind-Value="_Ulica"></InputText>
    </p>
  
    <label>Numer domu:</label>
    <p>
        <InputText type="text" @bind-Value="_NrDomu"></InputText>
    </p>
  
    <label>Numer mieszkania (opcjonalne):</label>
    <p>
        <InputText type="text" @bind-Value="_NrMieszkania"></InputText>
    </p>
    
    <p>---------------------------------------------------------</p>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
    <p style="color: red;">@errorMessage</p>
    }
    
    <p>
        <button type="submit" onclick="refreshPage()">Zarejestruj się</button>
    </p>

</EditForm>

@code {
    private int _idKontoUzytkownika;
    private int _idAdres;
    private int _idKlient;
    
    private string _Login = string.Empty;
    private string _Haslo = string.Empty;
    private string _Haslo1 = string.Empty;
    private string _kodprac = string.Empty;
    
    private string _Imie = string.Empty;
    private string _Nazwisko = string.Empty;
    private string _Mail = string.Empty;
    
    private string _Miasto = string.Empty;
    private string _Ulica = string.Empty;
    private string _Kraj = string.Empty;
    private string _NrDomu = string.Empty;
    private string _NrMieszkania = string.Empty;

    public KontoUzytkownikaModel newUser = new();
    private string errorMessage;

    private async Task RegisterUser()
    {
        if (_Haslo1 != _Haslo)
        {
            errorMessage = "Hasła nie są takie same.";
            return;
        }

        if (_kodprac == "1234")
        {
            newUser.CzyPracownik = true;
        }

        newUser.Login = _Login;
        newUser.Haslo = _Haslo;

        if (string.IsNullOrEmpty(_Login)
            || string.IsNullOrEmpty(_Haslo)
            || string.IsNullOrEmpty(_Imie)
            || string.IsNullOrEmpty(_Nazwisko)
            || string.IsNullOrEmpty(_Mail)
            || string.IsNullOrEmpty(_Miasto)
            || string.IsNullOrEmpty(_Ulica)
            || string.IsNullOrEmpty(_Kraj)
            || string.IsNullOrEmpty(_NrDomu))
        {
            errorMessage = "Uzupełnij wymagane pola.";
            return;
        }

        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                // Check if user already exists
                var checkQuery = "SELECT COUNT(*) FROM KontoUzytkownika WHERE Login = @login";
                using (var checkCommand = new MySqlCommand(checkQuery, connection))
                {
                    checkCommand.Parameters.AddWithValue("@login", newUser.Login);
                    var existingUserCount = (long)await checkCommand.ExecuteScalarAsync();
                    if (existingUserCount > 0)
                    {
                        errorMessage = "Użytkownik o podanej nazwie już istnieje.";
                        return;
                    }
                }

                // Insert new user
                var insertUserQuery = "INSERT INTO KontoUzytkownika (Login, Haslo, CzyPracownik) VALUES (@login, @haslo, @czyPracownik)";
                using (var insertUserCommand = new MySqlCommand(insertUserQuery, connection))
                {
                    insertUserCommand.Parameters.AddWithValue("@login", newUser.Login);
                    insertUserCommand.Parameters.AddWithValue("@haslo", newUser.Haslo);
                    insertUserCommand.Parameters.AddWithValue("@czyPracownik", newUser.CzyPracownik);
                    await insertUserCommand.ExecuteNonQueryAsync();
                }

                // Retrieve the new user's ID
                var selectUserIdQuery = "SELECT idKontoUzytkownika FROM KontoUzytkownika WHERE Login = @login AND Haslo = @haslo";
                using (var selectUserIdCommand = new MySqlCommand(selectUserIdQuery, connection))
                {
                    selectUserIdCommand.Parameters.AddWithValue("@login", _Login);
                    selectUserIdCommand.Parameters.AddWithValue("@haslo", _Haslo);
                    using (var reader = await selectUserIdCommand.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            _idKontoUzytkownika = reader.GetInt32("idKontoUzytkownika");
                            Console.WriteLine($"Found idKontoUzytkownika: {_idKontoUzytkownika}");
                        }
                    }
                }

                // Insert address
                var insertAddressQuery = "INSERT INTO Adres (Miasto, Ulica, Kraj, NrDomu, NrMieszkania, idKontoUzytkownika) VALUES (@miasto, @ulica, @kraj, @nrDomu, @nrMieszkania, @idKonto)";
                using (var insertAddressCommand = new MySqlCommand(insertAddressQuery, connection))
                {
                    insertAddressCommand.Parameters.AddWithValue("@miasto", _Miasto);
                    insertAddressCommand.Parameters.AddWithValue("@ulica", _Ulica);
                    insertAddressCommand.Parameters.AddWithValue("@kraj", _Kraj);
                    insertAddressCommand.Parameters.AddWithValue("@nrDomu", _NrDomu);
                    insertAddressCommand.Parameters.AddWithValue("@nrMieszkania", _NrMieszkania);
                    insertAddressCommand.Parameters.AddWithValue("@idKonto", _idKontoUzytkownika);
                    await insertAddressCommand.ExecuteNonQueryAsync();
                }

                // Retrieve the new address's ID
                var selectAddressIdQuery = "SELECT idAdres FROM Adres WHERE idKontoUzytkownika = @idKonto";
                using (var selectAddressIdCommand = new MySqlCommand(selectAddressIdQuery, connection))
                {
                    selectAddressIdCommand.Parameters.AddWithValue("@idKonto", _idKontoUzytkownika);
                    using (var reader = await selectAddressIdCommand.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            _idAdres = reader.GetInt32("idAdres");
                            Console.WriteLine($"Found idAdres: {_idAdres}");
                        }
                    }
                }
                

                // Insert client
                var insertClientQuery = "INSERT INTO Klient (idKontoUzytkownika, Imie, Nazwisko, Mail, idAdres) VALUES (@idKontoUzytkownika, @imie, @nazwisko, @mail, @idAdres)";
                using (var insertClientCommand = new MySqlCommand(insertClientQuery, connection))
                {
                    insertClientCommand.Parameters.AddWithValue("@idKontoUzytkownika", _idKontoUzytkownika);
                    insertClientCommand.Parameters.AddWithValue("@imie", _Imie);
                    insertClientCommand.Parameters.AddWithValue("@nazwisko", _Nazwisko);
                    insertClientCommand.Parameters.AddWithValue("@mail", _Mail);
                    insertClientCommand.Parameters.AddWithValue("@idAdres", _idAdres);
                    await insertClientCommand.ExecuteNonQueryAsync();
                }
                
                // Retrieve the Klient ID
                var selectKlientIdQuery = "SELECT idKlient FROM Klient WHERE idKontoUzytkownika = @idKonto";
                using (var selectKlientIdCommand = new MySqlCommand(selectKlientIdQuery, connection))
                {
                    selectKlientIdCommand.Parameters.AddWithValue("@idKonto", _idKontoUzytkownika);
                    using (var reader = await selectKlientIdCommand.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            _idKlient = reader.GetInt32("idKlient");
                            Console.WriteLine($"Found idKlient: {_idKlient}");
                        }
                    }
                }

                if (newUser.CzyPracownik)
                {
                    var insertWorkerQuery = "INSERT INTO Pracownik (idKontoUzytkownika, Imie, Nazwisko, Mail, idAdres, DaneUzu) VALUES (@idKontoUzytkownika, @imie, @nazwisko, @mail, @idAdres, @DaneU)";
                    using (var insertClientCommand = new MySqlCommand(insertWorkerQuery, connection))
                    {
                        insertClientCommand.Parameters.AddWithValue("@idKontoUzytkownika", _idKontoUzytkownika);
                        insertClientCommand.Parameters.AddWithValue("@imie", _Imie);
                        insertClientCommand.Parameters.AddWithValue("@nazwisko", _Nazwisko);
                        insertClientCommand.Parameters.AddWithValue("@mail", _Mail);
                        insertClientCommand.Parameters.AddWithValue("@idAdres", _idAdres);
                        insertClientCommand.Parameters.AddWithValue("@DaneU", 0);

                        await insertClientCommand.ExecuteNonQueryAsync();
                    }
                }
            }

            NavigationManager.NavigateTo("/Register", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd podczas rejestracji: {ex.Message}";
        }
    }



}
