@page "/Register"
@using CarRental.Models
@using MySqlConnector
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager


<h1>Register</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}



<EditForm Model="newUser" OnValidSubmit="RegisterUser" FormName="registrationForm">
    <ValidationSummary />

    <p>
        <label for="login">Nazwa użytkownika:</label>
        <InputText type="text" @bind-Value="_Login"></InputText>
        <ValidationMessage For="@(() => newUser.Login)" />
    </p>
    <p>
        <label for="password">Hasło:</label>
        <InputText type="password" @bind-Value="_Haslo"></InputText>
        <ValidationMessage For="@(() => newUser.Haslo)" />
    </p>
    <p>
        <label for="password">Powtórz hasło:</label>
        <InputText type="password" @bind-Value="_Haslo1"></InputText>
        <ValidationMessage For="@(() => newUser.Haslo)" />
    </p>

    <p>
        <label>Kod pracowniczy:</label>
        <InputText type="text" @bind-Value="_kodprac"></InputText>
    </p>
    
    <p>
        <button type="submit" onclick="refreshPage()">Zarejestruj się</button>
    </p>
</EditForm>

@code {
    private string _Login = String.Empty;
    private string _Haslo = String.Empty;
    private string _Haslo1 = String.Empty;
    private string _kodprac = String.Empty;
    public KontoUzytkownikaModel newUser = new();
    private string errorMessage;

    private async Task RegisterUser()
    {
        if (_Haslo1 != _Haslo)
        {
            errorMessage = "Hasła nie są takie same.";
            return;
        }
        
        if (_kodprac == "1234")
        {
            newUser.CzyPracownik = true;
        }
        
        newUser.Login = _Login;
        newUser.Haslo = _Haslo;
        
        if (string.IsNullOrEmpty(_Login) || string.IsNullOrEmpty(_Haslo))
        {
            errorMessage = "Nazwa użytkownika i Haslo jest wymagane.";
            return;
        }

        Console.WriteLine(_kodprac);
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
           
                var checkQuery = $"SELECT COUNT(*) FROM KontoUzytkownika WHERE Login = '{newUser.Login}'";
                using (var checkCommand = new MySqlCommand(checkQuery, connection))
                {
                    var existingUserCount = (long)await checkCommand.ExecuteScalarAsync();
                    if (existingUserCount > 0)
                    {
                        errorMessage = "Użytkownik o podanej nazwie już istnieje.";
                        return;
                    }
                }

                var query = $"INSERT INTO KontoUzytkownika (Login, Haslo, CzyPracownik) VALUES ('{newUser.Login}','{newUser.Haslo}',{newUser.CzyPracownik})";

                using (var command = new MySqlCommand(query, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }

            // Jeśli rejestracja zakończyła się sukcesem, możesz przekierować użytkownika na inną stronę
            // navigationManager.NavigateTo("/login");
            NavigationManager.NavigateTo("/Register", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd podczas rejestracji: {ex.Message}";
        }
    }

}
