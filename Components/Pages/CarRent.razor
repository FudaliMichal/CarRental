@page "/rent"
@using CarRental.Models
@using MySqlConnector
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<PageTitle>Car Renting</PageTitle>

<h1>Wynajmij auto:</h1>

<p>
    <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="OnShowModalClick"> Dodaj samochód </Button>
</p>

<div class="cargrid">
    
    @foreach (var car in _carlist)
    {
        <div class="cell">
            <div class="photo">
                <img src="@car.PhotoPath" alt="@car.Marka @car.Model" asp-append-version="true"/>
            </div>
            <div class="text">@car.Marka @car.Model</div>
            <div class="text">Możliwość najmu od: @car.KoniecNajmu</div>
            
            <div class="bottombutton">
                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => OnShowRentModalClick(car)"> Rezerwuj </Button>
                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => OnShowOffcanvasClick(car)"> Szczegóły </Button>
                
                @* @if() *@
                <p>
                    <Button Color="ButtonColor.Danger" Size="Size.Small" @onclick="() => DelCar(car)"> Usuń </Button>
                </p>
            </div>
        </div>
        }
</div>

<Offcanvas @ref="_offcanvas">
    <BodyTemplate>
        <h3>@_offcanvasTitle</h3>

        <div class="detail">
            @foreach (var item in _offcanvasText)
            {
                <p>@item</p>
            }
        </div>
    </BodyTemplate>
</Offcanvas>


<Modal @ref="_modal" Title="@_modalTitle">
    <BodyTemplate>

        Marka:
        <p>
            <InputText ValueExpression="() => _marka" ValueChanged="(value) => _marka = value"></InputText>
        </p>
        
        Model:
        <p>
            <InputText ValueExpression="() => _model" ValueChanged="(value) => _model = value"></InputText>
        </p>
        
        Liczba miejsc:
        <p>
            <InputNumber TValue="int" ValueExpression="() => _miejsca" ValueChanged="(value) => _miejsca = value"></InputNumber>
        </p>
        
        Typ auta:
        <p>
            <InputText ValueExpression="() => _typauta" ValueChanged="(value) => _typauta = value"></InputText>
        </p>
        
        Paliwo (0-Elektryczny, 1-Bezyna, 2-Diesel):
        <p>
            <InputNumber TValue="int" ValueExpression="() => _rodzajpaliwa" ValueChanged="(value) => _rodzajpaliwa = value"></InputNumber>
        </p>
        
        Ścieżka do zdjęcia (CarImages/"nazwa pliku".png/jpg):
        <p>
            <InputText ValueExpression="() => _path" ValueChanged="(value) => _path = value"></InputText>
        </p>
        
        Cena za dobę (zł)
        <p>
            <InputNumber TValue="int" ValueExpression="() => _cenadoba" ValueChanged="(value) => _cenadoba = value"></InputNumber>
        </p>
        
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Anuluj</Button>
        <Button Color="ButtonColor.Primary" @onclick="AddCarCallback">Dodaj samochód</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_rentmodal" Title="@_rentmodalTitle">
    <BodyTemplate>
        Auto dostępne od @_rentcar.KoniecNajmu

        @if (!string.IsNullOrEmpty(errorMessage))
        {
        <p style="color: red;">@errorMessage</p>
        }
        
        <p>
            Od: <DateInput TValue="DateOnly" Value="_datefrom" ValueExpression="() => _datefrom" ValueChanged="(value) => DateFromChanged(value)" />
        </p>
        <p>
            Do: <DateInput TValue="DateOnly" Value="_dateto" ValueExpression="() => _dateto" ValueChanged="(value) => DateToChanged(value)" />
        </p>
        <p>
            Wynajmujesz na: @_iloscdni dni - cena wynosi: @_cenazadni zł
        </p>
    </BodyTemplate>
    
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideRentModalClick">Anuluj</Button>
        <Button Color="ButtonColor.Primary" @onclick="ConfirmRentCallback">Potwierdź rezerwację</Button>
    </FooterTemplate>
</Modal>

@code
{
    private DateOnly _datefrom = DateOnly.FromDateTime(DateTime.Today);
    private DateOnly _dateto = DateOnly.FromDateTime(DateTime.Today);
    private int _iloscdni;
    private int _cenazadni;
    
    private string _marka;
    private string _model;
    private int _miejsca;
    private string _typauta;
    private int _rodzajpaliwa;
    private Paliwo _rodzajpaliwaenum;
    private string _path;
    private int _cenadoba;
    private string _koniecnajmu;
    
    private Offcanvas _offcanvas = default!;
    private string _offcanvasTitle = string.Empty;
    private List<string> _offcanvasText = new();

    private Modal _modal = default!;
    private string _modalTitle = string.Empty;

    private Modal _rentmodal = default!;
    private string _rentmodalTitle = string.Empty;
    private SamochodModel _rentcar = new();

    private string errorMessage = string.Empty;
    
    List<SamochodModel> _carlist = [];
    
    private async Task OnShowOffcanvasClick(SamochodModel car)
    {
        _offcanvasTitle = $"Szczegóły samochodu:";

        List<string> _Text = new();
        
        _Text.Add($"Marka: {car.Marka}");
        _Text.Add($"Model: {car.Model}");
        _Text.Add($"Typ auta: {car.TypAuta}");
        _Text.Add($"Ilość miejsc: {car.Miejsca}");
        _Text.Add($"Rodzaj paliwa: {car.RodzajPaliwa}");
        _Text.Add($"Cena za dobę: {car.CenaDoba}zł");
        _Text.Add($"Dostępny od: {car.KoniecNajmu}");

        _offcanvasText = _Text;
        
        await _offcanvas.ShowAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await ReadAllFromDb();
    }

    private async Task ReadAllFromDb()
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = "SELECT idSamochod, Marka, Model, TypAuta, Miejsce, RodzajPaliwa, PathZdjecie, KoniecNajmu, CenaDoba FROM Samochod";

                using (var command = new MySqlCommand(query, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            var id = reader.GetInt32("idSamochod");
                            var marka = reader.GetString("Marka");
                            var model = reader.GetString("Model");
                            var typAuta = reader.GetString("TypAuta");
                            var miejsce = reader.GetInt32("Miejsce");
                            var rodzajPaliwa = reader.GetInt32("RodzajPaliwa");
                            var pathZdjecie = reader.GetString("PathZdjecie");
                            var koniecNajmu = reader.GetString("KoniecNajmu");
                            var cenaDoba = reader.GetInt32("CenaDoba");

                            
                            _rodzajpaliwaenum = (Paliwo)rodzajPaliwa;
        
                            _carlist.Add(new SamochodModel()
                            {
                                Id = id,
                                Marka = marka,
                                Model = model,
                                TypAuta = typAuta,
                                Miejsca = miejsce,
                                RodzajPaliwa = _rodzajpaliwaenum,
                                PhotoPath = pathZdjecie,
                                KoniecNajmu = koniecNajmu,
                                CenaDoba = cenaDoba
                            });
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas odczytu danych: {ex.Message}");
        }
    }

    private async Task AddNewCar()
    {
        _rodzajpaliwaenum = (Paliwo)_rodzajpaliwa;
        _koniecnajmu = DateOnly.FromDateTime(DateTime.Now).ToString();
        
        _carlist.Add(new SamochodModel()
        {
            Marka = _marka,
            Model = _model,
            TypAuta = _typauta,
            Miejsca = _miejsca,
            RodzajPaliwa = _rodzajpaliwaenum,
            PhotoPath = _path,
            CenaDoba = _cenadoba,
            KoniecNajmu = _koniecnajmu
        });
        
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"INSERT INTO Samochod (Marka, Model, TypAuta, Miejsce, RodzajPaliwa, PathZdjecie, KoniecNajmu, CenaDoba) VALUES ('{_marka}','{_model}','{_typauta}','{_miejsca}','{_rodzajpaliwa}','{_path}','{_koniecnajmu}','{_cenadoba}')";
            
                using (var command = new MySqlCommand(query, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas dodawania samochodu: {ex.Message}");
        }
    }

    private async Task OnShowRentModalClick(SamochodModel rentcar)
    {
        errorMessage = string.Empty;
        _rentcar = rentcar;
        _datefrom = DateOnly.Parse(rentcar.KoniecNajmu);
        _dateto = DateOnly.Parse(rentcar.KoniecNajmu).AddDays(1);
        await Calculate();
        
        _rentmodalTitle = $"Wynajmij: {rentcar.Marka} {rentcar.Model}";
        await _rentmodal.ShowAsync();
    }

    private async Task OnHideRentModalClick()
    {
        await _rentmodal.HideAsync();
    }
    
    private async Task OnShowModalClick()
    {
        _modalTitle = "Wprowadź dane nowego samochodu:";
        await _modal.ShowAsync();
    }
    
   private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }
    
    private async Task AddCarCallback()
    {
        await AddNewCar();
        await _modal.HideAsync();
    }

    private async Task DelCar(SamochodModel c)
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"DELETE FROM Samochod WHERE (idSamochod) = ('{c.Id}')";

                using (var command = new MySqlCommand(query, connection))
                {
                    var result = await command.ExecuteNonQueryAsync();

                    if (result > 0)
                    {
                        _carlist.Remove(c);
                        Console.WriteLine("Samochód został usunięty z bazy danych.");
                    }
                    else
                    {
                        Console.WriteLine("Nie znaleziono samochodu o podanych parametrach.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas usuwania danych: {ex.Message}");
        }
    }

    private async Task ConfirmRentCallback()
    {
        if (errorMessage != string.Empty)
        {
            return;
        }
        
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"INSERT INTO Wypozyczenia (idSamochod, dataOd, dataDo, liczbaDni, cena) VALUES ('{_rentcar.Id}','{_datefrom}','{_dateto}','{_iloscdni}','{_cenazadni}')";
                var updatecar = $"UPDATE Samochod SET KoniecNajmu = '{_dateto}' WHERE idSamochod = {_rentcar.Id}";
                
                using (var command = new MySqlCommand(query, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
                
                using (var command2 = new MySqlCommand(updatecar, connection))
                {
                    await command2.ExecuteNonQueryAsync();
                }
            }

            _rentcar.KoniecNajmu = _dateto.ToString();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas dodawania wypozyczenia: {ex.Message}");
        }

        await _rentmodal.HideAsync();

        // Console.WriteLine($"Od: {_datefrom}\nDo: {_dateto}");
    }
        

    private async Task DateFromChanged(DateOnly dateOnly)
    {
        if (dateOnly == _datefrom)
        {
            return;
        }

        _datefrom = dateOnly;
        await Calculate();
    }

    private async Task DateToChanged(DateOnly dateOnly)
    {
        if (dateOnly == _dateto)
        {
            return;
        }

        _dateto = dateOnly;
        await Calculate();
    }

    private async Task Calculate()
    {
        DateTime d1 = DateTime.Parse(_datefrom.ToString());
        DateTime d2 = DateTime.Parse(_dateto.ToString());
        
        TimeSpan difference = d2 - d1;

        _iloscdni = difference.Days;
        _cenazadni = _iloscdni * _rentcar.CenaDoba;

        if (_iloscdni <= 0 || _datefrom < DateOnly.FromDateTime(DateTime.Today) || _datefrom <  DateOnly.Parse(_rentcar.KoniecNajmu))
        {
            _iloscdni = 0;
            _cenazadni = 0;
            errorMessage = "Podane terminy są nieprawidłowe.";
            return;
        }
        errorMessage = string.Empty;
        
    }
}

