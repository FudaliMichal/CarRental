@page "/rent"
@using CarRental.Models
@rendermode InteractiveServer

<PageTitle>Car Renting</PageTitle>

<h1>Rent a car of your choice:</h1>
<p>
    <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="OnShowModalClick"> Dodaj samochód </Button>
</p>

<div class="cargrid">
    
    @foreach (var car in _carlist)
    {
        <div class="cell">
            <div class="photo">
                <img src="@car.PhotoPath" alt="@car.Marka @car.Model" asp-append-version="true"/>
            </div>
            <div class="text">@car.Marka @car.Model</div>
            @if (@car.CzyZajety)
            {
                <div class="text">Status: Auto zarezerwowane</div>
            }
            else
            {
                <div class="text">Status: Auto wolne</div>
            }
            <div class="bottombutton">
                <Button Type="ButtonType.Link" Color="ButtonColor.Primary" Size="Size.Small" To="http://localhost:5091/rezerwacja"> Rezerwuj </Button>
                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => OnShowOffcanvasClick(car)"> Szczegóły </Button>
                
                @* @if() *@
                <p>
                    <Button Color="ButtonColor.Danger" Size="Size.Small" @onclick="() => DelCar(car)"> Usuń </Button>
                </p>
            </div>
        </div>
    }
</div>

<Offcanvas @ref="_offcanvas">
    <BodyTemplate>
        <h3>@_offcanvasTitle</h3>

        <div class="text"></div>

    </BodyTemplate>
</Offcanvas>


<Modal @ref="_modal" Title="@_modalTitle">
    <BodyTemplate>

        Marka:
        <p>
            <InputText ValueExpression="() => _marka" ValueChanged="(value) => _marka = value"></InputText>
        </p>
        
        Model:
        <p>
            <InputText ValueExpression="() => _model" ValueChanged="(value) => _model = value"></InputText>
        </p>
        
        Liczba miejsc:
        <p>
            <InputNumber TValue="int" ValueExpression="() => _miejsca" ValueChanged="(value) => _miejsca = value"></InputNumber>
        </p>
        
        Typ auta:
        <p>
            <InputText ValueExpression="() => _typauta" ValueChanged="(value) => _typauta = value"></InputText>
        </p>
        
        Paliwo (0-Elektryczny, 1-Bezyna, 2-Diesel):
        <p>
            <InputNumber TValue="int" ValueExpression="() => _rodzajpaliwa" ValueChanged="(value) => _rodzajpaliwa = value"></InputNumber>
        </p>
        
        Ścieżka do zdjęcia (CarImages/"nazwa pliku".png/jpg):
        <p>
            <InputText ValueExpression="() => _path" ValueChanged="(value) => _path = value"></InputText>
        </p>
        
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Anuluj</Button>
        <Button Color="ButtonColor.Primary" @onclick="AddCarCallback">Dodaj samochód</Button>
    </FooterTemplate>
</Modal>


@code
{
    private string _marka;
    private string _model;
    private int _miejsca;
    private string _typauta;
    private int _rodzajpaliwa;
    private Paliwo _rodzajpaliwaenum;
    private string _path;
    
    private Offcanvas _offcanvas = default!;
    private string _offcanvasTitle = string.Empty;

    private Modal _modal = default!;
    private string _modalTitle = string.Empty;
    
    List<SamochodModel> _carlist = [];
    
    private async Task OnShowOffcanvasClick(SamochodModel car)
    {
        _offcanvasTitle = $"Szczegóły samochodu: {car.Marka} {car.Model}";
        await _offcanvas.ShowAsync();
        
    }
    
    protected override Task OnInitializedAsync()
    {
        _carlist.Add(_auto1);
        _carlist.Add(_auto2);
        _carlist.Add(_auto3);
        _carlist.Add(_auto4);
        _carlist.Add(_auto5);
        return base.OnInitializedAsync();
    }

    SamochodModel _auto1 = new()
    {
        Id = 0,
        Marka = "Porsche",
        Model = "911",
        TypAuta = "Sport",
        Miejsca = 4,
        CzyZajety = false,
        RodzajPaliwa = Paliwo.Bezyna,
        PhotoPath = "CarImages/porsche911.webp",
    };
    
    SamochodModel _auto2 = new()
    {
        Id = 1,
        Marka = "Honda",
        Model = "Civic",
        TypAuta = "Hatchback",
        Miejsca = 5,
        CzyZajety = true,
        RodzajPaliwa = Paliwo.Bezyna,
        PhotoPath = "CarImages/hondacivic10.jpg",
    };
    
    SamochodModel _auto3 = new()
    {
        Id = 2,
        Marka = "Ford",
        Model = "Mustang",
        TypAuta = "Sport",
        Miejsca = 4,
        CzyZajety = false,
        RodzajPaliwa = Paliwo.Bezyna,
        PhotoPath = "CarImages/mustang.jpg",
    };
    
    SamochodModel _auto4 = new()
    {
        Id = 3,
        Marka = "VolksWagen",
        Model = "Touareg",
        TypAuta = "SUV",
        Miejsca = 5,
        CzyZajety = false,
        RodzajPaliwa = Paliwo.Diesel,
        PhotoPath = "CarImages/touareg.png",
    };
    
    SamochodModel _auto5 = new()
    {
        Id = 4,
        Marka = "Skoda",
        Model = "Superb",
        TypAuta = "Sedan",
        Miejsca = 5,
        CzyZajety = true,
        RodzajPaliwa = Paliwo.Diesel,
        PhotoPath = "CarImages/superb.png",
    };

    private void AddNewCar()
    {
        _rodzajpaliwaenum = (Paliwo)_rodzajpaliwa;
        
        _carlist.Add(new SamochodModel()
        {
            Marka = _marka,
            Model = _model,
            TypAuta = _typauta,
            Miejsca = _miejsca,
            CzyZajety = false,
            RodzajPaliwa = _rodzajpaliwaenum,
            PhotoPath = _path,
        });
    }
    
    private async Task OnShowModalClick()
    {
        _modalTitle = "Wprowadź dane nowego samochodu:";
        await _modal.ShowAsync();
    }
    
    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }
    
    private async Task AddCarCallback()
    {
        AddNewCar();
        await _modal.HideAsync();
    }

    private async Task DelCar(SamochodModel c)
    {
        _carlist.Remove(c);
    }
}

