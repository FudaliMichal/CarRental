@page "/rent"
@using CarRental.Models
@using MySqlConnector
@rendermode InteractiveServer
@inject IConfiguration Configuration

<PageTitle>Car Renting</PageTitle>

<h1>Rent a car of your choice:</h1>
<p>
    <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="OnShowModalClick"> Dodaj samochód </Button>
</p>

<div class="cargrid">
    
    @foreach (var car in _carlist)
    {
        <div class="cell">
            <div class="photo">
                <img src="@car.PhotoPath" alt="@car.Marka @car.Model" asp-append-version="true"/>
            </div>
            <div class="text">@car.Marka @car.Model</div>
            @if (@car.CzyZajety)
            {
                <div class="text">Status: Auto zarezerwowane</div>
            }
            else
            {
                <div class="text">Status: Auto wolne</div>
            }
            <div class="bottombutton">
                <Button Type="ButtonType.Link" Color="ButtonColor.Primary" Size="Size.Small" To="http://localhost:5091/rezerwacja"> Rezerwuj </Button>
                <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => OnShowOffcanvasClick(car)"> Szczegóły </Button>
                
                @* @if() *@
                <p>
                    <Button Color="ButtonColor.Danger" Size="Size.Small" @onclick="() => DelCar(car)"> Usuń </Button>
                </p>
            </div>
        </div>
        }
</div>

<Offcanvas @ref="_offcanvas">
    <BodyTemplate>
        <h3>@_offcanvasTitle</h3>

        <div class="detail">
            @foreach (var item in _offcanvasText)
            {
                <p>@item</p>
            }
        </div>
    </BodyTemplate>
</Offcanvas>


<Modal @ref="_modal" Title="@_modalTitle">
    <BodyTemplate>

        Marka:
        <p>
            <InputText ValueExpression="() => _marka" ValueChanged="(value) => _marka = value"></InputText>
        </p>
        
        Model:
        <p>
            <InputText ValueExpression="() => _model" ValueChanged="(value) => _model = value"></InputText>
        </p>
        
        Liczba miejsc:
        <p>
            <InputNumber TValue="int" ValueExpression="() => _miejsca" ValueChanged="(value) => _miejsca = value"></InputNumber>
        </p>
        
        Typ auta:
        <p>
            <InputText ValueExpression="() => _typauta" ValueChanged="(value) => _typauta = value"></InputText>
        </p>
        
        Paliwo (0-Elektryczny, 1-Bezyna, 2-Diesel):
        <p>
            <InputNumber TValue="int" ValueExpression="() => _rodzajpaliwa" ValueChanged="(value) => _rodzajpaliwa = value"></InputNumber>
        </p>
        
        Ścieżka do zdjęcia (CarImages/"nazwa pliku".png/jpg):
        <p>
            <InputText ValueExpression="() => _path" ValueChanged="(value) => _path = value"></InputText>
        </p>
        
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Anuluj</Button>
        <Button Color="ButtonColor.Primary" @onclick="AddCarCallback">Dodaj samochód</Button>
    </FooterTemplate>
</Modal>


@code
{
    private string _marka;
    private string _model;
    private int _miejsca;
    private string _typauta;
    private int _rodzajpaliwa;
    private Paliwo _rodzajpaliwaenum;
    private string _path;
    
    private Offcanvas _offcanvas = default!;
    private string _offcanvasTitle = string.Empty;
    private List<string> _offcanvasText = new();

    private Modal _modal = default!;
    private string _modalTitle = string.Empty;
    
    List<SamochodModel> _carlist = [];
    
    private async Task OnShowOffcanvasClick(SamochodModel car)
    {
        _offcanvasTitle = $"Szczegóły samochodu:";

        List<string> _Text = new();
        
        _Text.Add($"Marka: {car.Marka}");
        _Text.Add($"Model: {car.Model}");
        _Text.Add($"Typ auta: {car.TypAuta}");
        _Text.Add($"Ilość miejsc: {car.Miejsca}");
        _Text.Add($"Rodzaj paliwa: {car.RodzajPaliwa}");
        _Text.Add($"Zarezerwowany: {car.CzyZajety}");

        _offcanvasText = _Text;
        
        await _offcanvas.ShowAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await ReadAllFromDb();
    }

    private async Task ReadAllFromDb()
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = "SELECT Marka, Model, TypAuta, Miejsce, CzyZajety, RodzajPaliwa, PathZdjecie FROM Samochod";

                using (var command = new MySqlCommand(query, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            var marka = reader.GetString("Marka");
                            var model = reader.GetString("Model");
                            var typAuta = reader.GetString("TypAuta");
                            var miejsce = reader.GetInt32("Miejsce");
                            var czyZajety = reader.GetBoolean("CzyZajety");
                            var rodzajPaliwa = reader.GetInt32("RodzajPaliwa");
                            var pathZdjecie = reader.GetString("PathZdjecie");

                            
                            _rodzajpaliwaenum = (Paliwo)rodzajPaliwa;
        
                            _carlist.Add(new SamochodModel()
                            {
                                Marka = marka,
                                Model = model,
                                TypAuta = typAuta,
                                Miejsca = miejsce,
                                CzyZajety = czyZajety,
                                RodzajPaliwa = _rodzajpaliwaenum,
                                PhotoPath = pathZdjecie,
                            });
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas odczytu danych: {ex.Message}");
        }
    }

    private async Task AddNewCar()
    {
        _rodzajpaliwaenum = (Paliwo)_rodzajpaliwa;
        
        _carlist.Add(new SamochodModel()
        {
            Marka = _marka,
            Model = _model,
            TypAuta = _typauta,
            Miejsca = _miejsca,
            CzyZajety = false,
            RodzajPaliwa = _rodzajpaliwaenum,
            PhotoPath = _path,
        });
        
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"INSERT INTO Samochod (Marka, Model, TypAuta, Miejsce, CzyZajety, RodzajPaliwa, PathZdjecie) VALUES ('{_marka}','{_model}','{_typauta}','{_miejsca}','{0}','{_rodzajpaliwa}','{_path}')";
            
                using (var command = new MySqlCommand(query, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas dodawania samochodu: {ex.Message}");
        }
    }
    
    private async Task OnShowModalClick()
    {
        _modalTitle = "Wprowadź dane nowego samochodu:";
        await _modal.ShowAsync();
    }
    
   private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }
    
    private async Task AddCarCallback()
    {
        await AddNewCar();
        await _modal.HideAsync();
    }

    private async Task DelCar(SamochodModel c)
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("MySqlConnection1");

            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();

                var query = $"DELETE FROM Samochod WHERE (Marka) = ('{c.Marka}') AND (Model) = ('{c.Model}')";

                using (var command = new MySqlCommand(query, connection))
                {
                    var result = await command.ExecuteNonQueryAsync();

                    // Sprawdzenie, czy rekord został usunięty
                    if (result > 0)
                    {
                        _carlist.Remove(c);
                        Console.WriteLine("Samochód został usunięty z bazy danych.");
                    }
                    else
                    {
                        Console.WriteLine("Nie znaleziono samochodu o podanych parametrach.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas usuwania danych: {ex.Message}");
        }
    }
}

